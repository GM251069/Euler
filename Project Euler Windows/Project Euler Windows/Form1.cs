using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using System.Diagnostics;
using System.Numerics;
using System.Speech.Synthesis;
using System.IO;

namespace Project_Euler_Windows
{
    public partial class Form1 : Form
    {
        private static Stopwatch MyTimer = new Stopwatch();
        private SpeechSynthesizer voice;
        public Form1()
        {
            InitializeComponent();
            voice = new SpeechSynthesizer();
            //voice.Speak("Project euler");
            //voice.Speak("Hello Seth");

        }
        private static void MyStart()
        {
            MyTimer.Reset();
            MyTimer.Start();
            Cursor.Current = Cursors.WaitCursor;
            return;
        }
        public static string MyStop()
        {
            MyTimer.Stop();
            Cursor.Current = Cursors.Default;
            string MyTime = "Elapsed Time = " + MyTimer.ElapsedMilliseconds + "ms.";
            return MyTime;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 1");
            SetStatus("Problem 1 selected");
            MessageBox.Show("If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. \n\nThe sum of these multiples is 23. \n\nFind the sum of all the multiples of 3 or 5 below 1000.", "Problem 1.");
            SetStatus("Solving problem 1");
            MyStart();
            int count;
            int sum = 0;
            for (count = 0; count < 1000; count++)
            {
                if ((count % 3 == 0) || (count % 5 == 0))
                {
                    sum += count;
                }

            }
            MessageBox.Show("The sum of all the multiples of 3 or 5 below 1000 is " + sum + ".  " + MyStop(), "Problem 1");
            SetStatus("Waiting for a selection.");
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            voice.Speak("Goodbye");
            System.Windows.Forms.Application.Exit();
        }

        private void btn2_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 2");
            SetStatus("Problem 2 selected");
            MessageBox.Show("Each new term in the Fibonacci sequence is generated by adding the previous two terms.\nBy starting with 1 and 2, the first 10 terms will be:\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...  \n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.", "Problem 2");
            MyStart();
            SetStatus("Solving problem 2");
            int Number1 = 1;
            int Number2 = 2;
            int Number3;
            int sum = 0;
            do
            {
                Number3 = Number1 + Number2;
                Number1 = Number2;
                Number2 = Number3;
                if (Number3 % 2 == 0)
                {
                    sum += Number3;
                }
            } while (Number3 < 4000000);

            MessageBox.Show("The sum of even numbers in a Fibonacci sequence below 4000000 is " + sum + ". " + MyStop(), "Problem 2");
            SetStatus("Waiting for a selection.");
        }

        private void btn16_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 16");
            SetStatus("Problem 16 selected");
            MessageBox.Show("2 raised to power 15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26. \n\nWhat is the sum of the digits of the number 2 raised to the power 1000? ", "Problem 16: Power Digit Sum");
            MyStart();
            SetStatus("Solving problem 16");
            BigInteger MyResult = new BigInteger();
            BigInteger Number = new BigInteger();
            Number = 2;
            MyResult = BigInteger.Pow(Number, 1000);

            MessageBox.Show("2 raised to the power 1000 = " + MyResult, "Problem 16");
            string MyAnswer = SumTheDigits(MyResult);
            MessageBox.Show("The sum of the digits of 2 raised to power 1000 is " + MyAnswer + ". " + MyStop(), "Problem 16");
            SetStatus("Waiting for a selection.");
            //Clipboard.SetText(MyAnswer.ToString());
        }
        public static string SumTheDigits(BigInteger MyNumber)
        {
            int MyAnswer = 0;
            string MyNumberString = MyNumber.ToString();
            char[] MyArray = new char[MyNumberString.Length];
            MyArray = MyNumberString.ToArray();
            for (int i = 0; i < MyNumberString.Length; i++)
            {
                char ValChar = MyArray[i];
                int Val = 0;
                Val = (int)Char.GetNumericValue(ValChar);
                MyAnswer += Val;
            }
            return MyAnswer.ToString();
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Windows.Forms.Application.Exit();
        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Project Euler Solutions\nBy Garry Motley\nOctober 2016.\n\nhttps://projecteuler.net", "About Project Euler");
        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            voice.Speak("Problem 6");
            SetStatus("Problem 6 selected");
            double MySumSqr = 0;
            string Message = "The sum of the squares of the first ten natural numbers is,";
            Message += "\n\n                    1^2 + 2^2 + ... + 10^2 = 385";
            Message += "\n\nThe square of the sum of the first ten natural numbers is,";
            Message += "\n\n                   (1 + 2 + ... + 10)^2 = 552 = 3025";
            Message += "\n\nHence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.";
            Message += "\n\nFind the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.";
            MessageBox.Show(Message, "Problem 6");
            MyStart();
            SetStatus("Solving problem 6");
            for (double i = 1; i < 100 + 1; i++)
            {
                MySumSqr += Math.Pow(i, 2);
                //Console.WriteLine(i + "^2 = " + Math.Pow(i, 2));
            }
            Console.WriteLine("The sum of the squares is " + MySumSqr);
            int MySum = 0;
            for (int i = 1; i < 1000 + 1; i++)
            {
                MySum += i;
            }
            double MySqrSum = Math.Pow(MySum, 2);
            double MyDifference = MySqrSum - MySumSqr;
            Message = "Sum of numbers is " + MySum;
            Message += "\n\nThe square of the sum of the numbers is " + MySqrSum;
            Message += "\n\nThe difference between the sum of the squares and the square of the sum is " + MyDifference;
            Message += "\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 6 - Solved.");
            SetStatus("Waiting for a selection.");
        }

        private void btn5_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 5");
            SetStatus("Problem 5 selected");
            //Console.WriteLine("Problem 5:Smallest Multiple");
            //Console.WriteLine("2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?");
            string Message = "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\n";
            Message += "What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20 ? ";
            MessageBox.Show(Message, "Problem 5");
            int MyNumber = 20;
            MyStart();
            SetStatus("Solving problem 5");
            bool IsMultiple;
            for (long j = 2; j < 10000000000; j++)
            {
                IsMultiple = true;
                for (int i = 2; i < MyNumber; i++)
                {
                    if (j % i != 0)
                    {
                        IsMultiple = false;
                        break;
                    }
                }
                if (IsMultiple)
                {
                    Message = "The lowest common multiple of all numbers from 1 to " + MyNumber + " is " + j + ".\n\n" + MyStop();
                    MessageBox.Show(Message, "Problem 5 Solved");
                    SetStatus("Waiting for a selection.");
                    break;
                }
            }
        }

        private void btn20_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 20");
            SetStatus("Problem 20 selected");
            BigInteger StartNumber = 100;
            string message = "n! means n × (n − 1) × ... × 3 × 2 × 1\n\n";
            message += "For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,\n";
            message += "and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.\n\n";
            message += "Find the sum of the digits in the number 100!";
            MessageBox.Show(message, "Problem 20 - Factorial Digit Sum");
            MyStart();
            SetStatus("Solving problem 20");
            BigInteger MyProduct = StartNumber;
            for (int count = 2; count < StartNumber; count++)
            {
                MyProduct = MyProduct * count;
            }
            //Console.WriteLine(StartNumber + "! = " + MyProduct);


            message = " The result of " + StartNumber + "! = " + MyProduct + ".\n\n";
            message += "Sum of the digits in " + StartNumber + "! = " + SumTheDigits(MyProduct);
            MessageBox.Show(message + "\n\n" + MyStop(), "Problem 20 Solved");
            SetStatus("Waiting for a selection.");
            // Console.WriteLine("Sum of the digits in " + StartNumber + "! = " + MySum);
            //MyStop();

        }

        private void btn30_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 30");
            SetStatus("Problem 30 selected");
            string Message = "Surprisingly there are only three numbers that can be written as the sum of the fourth powers of their digits:";
            Message += "\n\n1634 = 1^4 + 6^4 + 3^4 + 4^4";
            Message += "\n8208 = 8^4 + 2^4 + 0^4 + 8^4";
            Message += "\n9474 = 9^4 + 4^4 + 7^4 + 4^4";
            Message += "\n\nAs 1 = 1^4 is not a sum it is not included.";
            Message += "The sum of these numbers is 1634 + 8208 + 9474 = 19316.";
            Message += "\n\nFind the sum of all the numbers that can be written as the sum of fifth powers of their digits.";
            MessageBox.Show(Message, "Problem 30 - Fifth Powers.");
            MyStart();
            SetStatus("Solving problem 30");
            IEnumerable<int> numbers;
            double sum = 0;
            int BigSum = 0;
            for (int count = 2; count < 1000000; count++)
            {
                sum = 0;
                numbers = GetDigits(count);
                foreach (int number in numbers)
                {
                    sum += Math.Pow(number, 5);
                }
                if (sum == count)
                {
                    BigSum += count;
                }
            }

            //Console.WriteLine(BigSum);
            Message = "The sum of all numbers that can written as the sum of fifth powers of their digits is " + BigSum;
            Message += "\n" + MyStop();
            MessageBox.Show(Message, "Problem 30 - Fifth Powers Solved.");
            SetStatus("Waiting for a selection.");
        }
        public static IEnumerable<int> GetDigits(long number)
        {
            long n = number;
            IList<int> digits = new List<int>();
            do
            {
                digits.Add((int)(n % 10));
                n /= 10;
            } while (n > 0);
            return digits.Reverse().ToList();
        }

        private void btn31_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 31");
            SetStatus("Problem 31 selected");
            string Message = "In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:";
            Message += "\n\n1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).";
            Message += "\n\nIt is possible to make £2 in the following way:";
            Message += "\n\n1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p";
            Message += "\n\nHow many different ways can £2 be made using any number of coins?";
            MessageBox.Show(Message, "Problem 31 - Coins Sums.");

            MyStart();
            SetStatus("Solving problem 31");
            int Sum;
            int count = 0;

            for (int OnePence = 0; OnePence < 201; OnePence++)
            {
                for (int TwoPence = 0; TwoPence < 101; TwoPence++)
                {
                    for (int FivePence = 0; FivePence < 41; FivePence++)
                    {
                        for (int TenPence = 0; TenPence < 21; TenPence++)
                        {
                            for (int TwentyPence = 0; TwentyPence < 11; TwentyPence++)
                            {
                                for (int FiftyPence = 0; FiftyPence < 5; FiftyPence++)
                                {
                                    for (int OnePound = 0; OnePound < 3; OnePound++)
                                    {
                                        for (int TwoPound = 0; TwoPound < 2; TwoPound++)
                                        {
                                            Sum = (OnePence * 1) +
                                                  (TwoPence * 2) +
                                                  (FivePence * 5) +
                                                  (TenPence * 10) +
                                                  (TwentyPence * 20) +
                                                  (FiftyPence * 50) +
                                                  (OnePound * 100) +
                                                  (TwoPound * 200);
                                            if (Sum == 200)
                                            {
                                                count++;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            Message = "There are " + count + " ways to make £2.\n\n " + MyStop();

            MessageBox.Show(Message, "Problem 31 Solved.");
            SetStatus("Waiting for a selection.");
        }

        private void btn3_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 3");
            SetStatus("Problem 3 selected");
            string Message = "The prime factors of 13195 are 5, 7, 13 and 29.\n\n";
            Message += "What is the largest prime factor of the number 600851475143 ?";
            MessageBox.Show(Message, "Problem 3 - Largest Prime Factor");
            MyStart();
            Console.WriteLine("Problem 3 : Prime Factor");
            MyStart();
            SetStatus("Solving problem 3");
            bool[] Sieve = new bool[2000000];
            for (int count = 2; count < 2000000; count++)
            {
                Sieve[count] = true;
            }

            for (int count = 2; count < 2000000; count++)
            {
                if (Sieve[count] == true)
                {
                    for (long p = 2; (p * count) < Sieve.Length; p++)
                    {
                        Sieve[p * count] = false;
                    }
                }
            }

            for (int count = Sieve.Length - 1; count > 1; count--)
            {
                if (Sieve[count] == true)
                {
                    if (600851475143 % count == 0)
                    {
                        Message = "the largest prime factor of the number 600851475143 is " + count + ".\n\n" + MyStop();
                        break;
                    }
                }
            }
            MessageBox.Show(Message, "Problem 2 Solved.");
            SetStatus("Waiting for a selection.");
        }

        public static bool IsPalindrome(string value)
        {
            int min = 0;
            int max = value.Length - 1;
            while (true)
            {
                if (min > max)
                {
                    return true;
                }
                char a = value[min];
                char b = value[max];
                if (char.ToLower(a) != char.ToLower(b))
                {
                    return false;
                }
                min++;
                max--;
            }
        }

        private void button1_Click_2(object sender, EventArgs e)
        {
            voice.Speak("Problem 4");
            SetStatus("Problem 4 selected");
            //Console.WriteLine("Problem 4 - Palindrome Products");
            string Message = "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.";
            Message += "\n\nFind the largest palindrome made from the product of two 3-digit numbers.";
            MessageBox.Show(Message, "Problem 4 - Largest Palindrome Product");
            MyStart();
            SetStatus("Solving problem 4");
            int[] Numbers = new int[10000];
            for (int c = 0; c < 9999; c++)
            {
                Numbers[c] = 0;
            }

            int multiplier;
            int multiplicand;
            int i = 0;
            for (multiplier = 999; multiplier > 100; multiplier--)
            {
                for (multiplicand = 999; multiplicand > 100; multiplicand--)
                {
                    int product = multiplicand * multiplier;
                    string value = Convert.ToString(product);
                    //Console.WriteLine(multiplicand + "*" + multiplier + "= " + product);
                    if (IsPalindrome(value) == true)
                    {
                        Numbers[i] = product;
                        i++;
                    }
                }
                Message = "The largerst palindromic product of two three digit numbers is " + Numbers.Max().ToString() + "\n\n" + MyStop();
            }
            MessageBox.Show(Message, "Problem 4 Solved.");
            SetStatus("Waiting for a selection.");
        }

        private void btn7_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 7");
            SetStatus("Problem 7 selected");
            string Message = "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n\nWhat is the 10 001st prime number?";
            MessageBox.Show(Message, "Problem 7 - 10001st Prime");
            MyStart();
            SetStatus("Solving problem 7");
            bool[] Sieve = new bool[2000000];
            for (int count = 2; count < 2000000; count++)
            {
                Sieve[count] = true;
            }

            for (int count = 2; count < 2000000; count++)
            {
                if (Sieve[count] == true)
                {
                    for (long p = 2; (p * count) < Sieve.Length; p++)
                    {
                        Sieve[p * count] = false;
                    }
                }
            }
            //now move the primes to a new array
            int[] Primes = new int[2000000];
            for (int i = 0; i < 200000; i++)
            {
                Primes[i] = 0;
            }
            int PrimeMarker = 0;
            for (int ii = 0; ii < Sieve.Length - 1; ii++)
            {
                if (Sieve[ii] == true)
                {
                    Primes[PrimeMarker] = ii;
                    PrimeMarker++;
                }
            }
            Message = "The 10,001st prime number is " + Primes[10000].ToString() + "\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 7 Solved.");
            SetStatus("Waiting for a selection.");
        }

        private void btn8_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 8");
            SetStatus("Problem 8 selected");
            string Message = "The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.\n";
            Message += "\n";
            Message += "\n          73167176531330624919225119674426574742355349194934";
            Message += "\n          96983520312774506326239578318016984801869478851843";
            Message += "\n          85861560789112949495459501737958331952853208805511";
            Message += "\n          12540698747158523863050715693290963295227443043557";
            Message += "\n          66896648950445244523161731856403098711121722383113";
            Message += "\n          62229893423380308135336276614282806444486645238749";
            Message += "\n          30358907296290491560440772390713810515859307960866";
            Message += "\n          70172427121883998797908792274921901699720888093776";
            Message += "\n          65727333001053367881220235421809751254540594752243";
            Message += "\n          52584907711670556013604839586446706324415722155397";
            Message += "\n          53697817977846174064955149290862569321978468622482";
            Message += "\n          83972241375657056057490261407972968652414535100474";
            Message += "\n          82166370484403199890008895243450658541227588666881";
            Message += "\n          16427171479924442928230863465674813919123162824586";
            Message += "\n          17866458359124566529476545682848912883142607690042";
            Message += "\n          24219022671055626321111109370544217506941658960408";
            Message += "\n          07198403850962455444362981230987879927244284909188";
            Message += "\n          84580156166097919133875499200524063689912560717606";
            Message += "\n          05886116467109405077541002256983155200055935729725";
            Message += "\n          71636269561882670428252483600823257530420752963450";
            Message += "\n\nFind the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?";
            MessageBox.Show(Message, "Problem 8 - Largest product in a series");
            MyStart();
            SetStatus("Solving problem 8");
            String BigNumberString = "73167176531330624919225119674426574742355349194934";
            BigNumberString += "96983520312774506326239578318016984801869478851843";
            BigNumberString += "85861560789112949495459501737958331952853208805511";
            BigNumberString += "12540698747158523863050715693290963295227443043557";
            BigNumberString += "66896648950445244523161731856403098711121722383113";
            BigNumberString += "62229893423380308135336276614282806444486645238749";
            BigNumberString += "30358907296290491560440772390713810515859307960866";
            BigNumberString += "70172427121883998797908792274921901699720888093776";
            BigNumberString += "65727333001053367881220235421809751254540594752243";
            BigNumberString += "52584907711670556013604839586446706324415722155397";
            BigNumberString += "53697817977846174064955149290862569321978468622482";
            BigNumberString += "83972241375657056057490261407972968652414535100474";
            BigNumberString += "82166370484403199890008895243450658541227588666881";
            BigNumberString += "16427171479924442928230863465674813919123162824586";
            BigNumberString += "17866458359124566529476545682848912883142607690042";
            BigNumberString += "24219022671055626321111109370544217506941658960408";
            BigNumberString += "07198403850962455444362981230987879927244284909188";
            BigNumberString += "84580156166097919133875499200524063689912560717606";
            BigNumberString += "05886116467109405077541002256983155200055935729725";
            BigNumberString += "71636269561882670428252483600823257530420752963450";
            string p = BigNumberString.ToString();
            ulong largest = 0;
            ulong numm = 0;
            int winPos = 0;
            for (int i = 0; i < p.Length - 13; i++)
            {
                numm = ulong.Parse(p.Substring(i, 1)) *
                        ulong.Parse(p.Substring(i + 1, 1)) *
                        ulong.Parse(p.Substring(i + 2, 1)) *
                        ulong.Parse(p.Substring(i + 3, 1)) *
                        ulong.Parse(p.Substring(i + 4, 1)) *
                        ulong.Parse(p.Substring(i + 5, 1)) *
                        ulong.Parse(p.Substring(i + 6, 1)) *
                        ulong.Parse(p.Substring(i + 7, 1)) *
                        ulong.Parse(p.Substring(i + 8, 1)) *
                        ulong.Parse(p.Substring(i + 9, 1)) *
                        ulong.Parse(p.Substring(i + 10, 1)) *
                        ulong.Parse(p.Substring(i + 11, 1)) *
                        ulong.Parse(p.Substring(i + 12, 1));
                if (numm > largest)
                {
                    //MessageBox.Show("New largest " + numm + " replaces " + largest);
                    largest = numm;
                }
                Message = int.Parse(p.Substring(i, 1)) + " * " +
                           int.Parse(p.Substring(i + 1, 1)) + " * " +
                           int.Parse(p.Substring(i + 2, 1)) + " * " +
                           int.Parse(p.Substring(i + 3, 1)) + " * " +
                           int.Parse(p.Substring(i + 4, 1)) + " * " +
                           int.Parse(p.Substring(i + 5, 1)) + " * " +
                           int.Parse(p.Substring(i + 6, 1)) + " * " +
                           int.Parse(p.Substring(i + 7, 1)) + " * " +
                           int.Parse(p.Substring(i + 8, 1)) + " * " +
                           int.Parse(p.Substring(i + 9, 1)) + " * " +
                           int.Parse(p.Substring(i + 10, 1)) + " * " +
                           int.Parse(p.Substring(i + 11, 1)) + " * " +
                           int.Parse(p.Substring(i + 12, 1)) + " = " + numm;
                // MessageBox.Show(Message.ToString());
            }
            Message = int.Parse(p.Substring(winPos, 1)) + " * " +
                           int.Parse(p.Substring(winPos + 1, 1)) + " * " +
                           int.Parse(p.Substring(winPos + 2, 1)) + " * " +
                           int.Parse(p.Substring(winPos + 3, 1)) + " * " +
                           int.Parse(p.Substring(winPos + 4, 1)) + " * " +
                           int.Parse(p.Substring(winPos + 5, 1)) + " * " +
                           int.Parse(p.Substring(winPos + 6, 1)) + " * " +
                           int.Parse(p.Substring(winPos + 7, 1)) + " * " +
                           int.Parse(p.Substring(winPos + 8, 1)) + " * " +
                           int.Parse(p.Substring(winPos + 9, 1)) + " * " +
                           int.Parse(p.Substring(winPos + 10, 1)) + " * " +
                           int.Parse(p.Substring(winPos + 11, 1)) + " * " +
                           int.Parse(p.Substring(winPos + 12, 1)) + " = " + largest;
            MessageBox.Show(Message + "\n\n" + MyStop(), "Problem 8 solved.");
            SetStatus("Waiting for a selection.");

        }

        private void btn10_Click(object sender, EventArgs e)
        {
            {
                voice.Speak("Problem 10");
                SetStatus("Problem 10 selected");
                Console.WriteLine("Problem 10 : Summation of Primes");
                string Message = "The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\n Find the sum of all the primes below two million.";
                MessageBox.Show(Message, "Problem 10 - Summation of Primes");
                MyStart();
                SetStatus("Solving problem 10");
                long sum = 0;

                bool[] Sieve = new bool[2000000];
                for (int count = 2; count < 2000000; count++)
                {
                    Sieve[count] = true;
                }

                for (int count = 2; count < 2000000; count++)
                {
                    if (Sieve[count] == true)
                    {
                        for (long p = 2; (p * count) < Sieve.Length; p++)
                        {
                            Sieve[p * count] = false;
                        }
                    }
                }

                for (int count = 0; count < 2000000; count++)
                {
                    if (Sieve[count] == true)
                    {
                        sum += count;
                    }
                }
                Message = "The sum of all prime numbers below two million is " + sum + "\n\n" + MyStop();
                MessageBox.Show(Message, "Problem 10 - Solved.");
                SetStatus("Waiting for a selection.");

            }

        }

        private void btn9_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 9");
            SetStatus("Problem 9 selected");
            string Message = "A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n\n                a^2 + b^2 = c^2\nFor example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n\n";
            Message += "There exists exactly one Pythagorean triplet for which a + b + c = 1000.\n\nFind the product abc.";
            MessageBox.Show(Message, "Problem 9 - Special Pythagorean triplet.");
            MyStart();
            SetStatus("Solving problem 9");
            int a;
            int b;
            int c;
            int sum;
            double asq;
            double bsq;
            double csq;
            double sumsq;
            int product = 0;
            int ansa = 0;
            int ansb = 0;
            int ansc = 0;
            for (a = 0; a < 1000; a++)
            {
                for (b = 0; b < 1000; b++)
                {
                    for (c = 0; c < 1000; c++)
                    {
                        sum = a + b + c;
                        {
                            if (sum == 1000 && (a < b) && (b < c))
                            {
                                //is it pythagorean?
                                asq = Math.Pow(a, 2);
                                bsq = Math.Pow(b, 2);
                                csq = Math.Pow(c, 2);
                                sumsq = asq + bsq;
                                if (sumsq == csq)
                                {
                                    product = a * b * c;
                                    ansa = a;
                                    ansb = b;
                                    ansc = c;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            Message = "The product of Pythagorean triplet where sum a+b+c = 1000(" + ansa + " + " + ansb + " + " + ansc + ") is " + product + "\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 10 - Solved.");
            SetStatus("Waiting for a selection.");
        }

        private void btn36_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 36");
            SetStatus("Problem 36 selected");
            string Message = "The decimal number, 585 = 1001001001 (binary), is palindromic in both bases.\n\n";
            Message += "Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.\n\n";
            Message += "(Please note that the palindromic number, in either base, may not include leading zeros.)";
            MessageBox.Show(Message, "Problem 36 - Double base Palindromes.");
            MyStart();
            SetStatus("Solving problem 36");
            int sum = 0;
            for (int i = 0; i < 1000000; i++)
            {
                //is this number a palindrome?
                if (IsPalindrome(i.ToString()))
                {
                    //It's a palindrome so convert to binary and see if that is too.
                    var result = Convert.ToString(i, 2);
                    //MessageBox.Show(result);
                    if (IsPalindrome(result.ToString()))
                    {
                        //MessageBox.Show(i + " and " + result + "are both palindromes");
                        sum += i;
                    }
                }
            }
            Message = "The sum of all numbers which are palindromic in both decimal and binary is " + sum + ".\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 36 Solved.");
            SetStatus("Waiting for a selection.");
        }

        private void btn48_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 48");
            SetStatus("Problem 48 selected");
            string Message = "The series, 1^1 + 2^2 + 3^3 + ... + 10^10 = 10405071317.\n\n";
            Message += "Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000.";
            MessageBox.Show(Message, "Problem 48 - Self Powers");
            MyStart();
            SetStatus("Solving problem 48");
            BigInteger result = 0;
            for (int i = 1; i <= 1000; i++)
            {
                result += BigInteger.Pow(i, i);
            }
            string Ans = result.ToString();
            string FinalAns = Ans.Substring(Ans.Length - 10, 10);
            Message = "The  last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000 =  " + FinalAns + ".\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 48 Solved.");
            SetStatus("Waiting for a selection.");
        }

        private void btn145_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 145");
            SetStatus("Problem 145 selected");
            string Message = "Some positive integers n have the property that the sum [ n + reverse(n) ] consists entirely of odd (decimal) digits. For instance, 36 + 63 = 99 and 409 + 904 = 1313. We will call such numbers reversible; so 36, 63, 409, and 904 are reversible. Leading zeroes are not allowed in either n or reverse(n).\n\nThere are 120 reversible numbers below one-thousand.\n\nHow many reversible numbers are there below one - billion(10^9) ? ";
            MessageBox.Show(Message, "Problem 145 - Reversible Numbers.");
            MyStart();
            SetStatus("Solving problem 145");
            BigInteger n = 0;
            BigInteger rn = 0;
            BigInteger sum = 0;
            //BigInteger[] sumArray;

            for (n = 0; n < 1000; n++)
            {
                rn = reverseNumber(n);
                //MessageBox.Show(n + "+" + rn + "=" + (n + rn));
                sum = n + rn;
                if (sum % 2 != 0)
                {

                }

            }
            Message = ".\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 145 Solved.");
            SetStatus("Waiting for a selection.");
        }
        public int reverseNumber(int Number)
        {
            int ReverseNumber = 0;
            while (Number > 0)
            {
                ReverseNumber = (ReverseNumber * 10) + (Number % 10);
                Number = Number / 10;
            }
            return ReverseNumber;
        }
        public BigInteger reverseNumber(BigInteger Number)
        {
            BigInteger ReverseNumber = 0;
            while (Number > 0)
            {
                ReverseNumber = (ReverseNumber * 10) + (Number % 10);
                Number = Number / 10;
            }
            return ReverseNumber;
        }

        private void btn17_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 17");
            SetStatus("Problem 17 selected");
            string Message = "If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.\n\n";
            Message += "If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?\n\n";
            Message += "NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of 'and' when writing out numbers is in compliance with British usage.";
            MessageBox.Show(Message, "Problem 17 - Number Letter Counts");

            int sum = 0;
            MyStart();
            SetStatus("Solving problem 17");
            //1-9:  the number of letters in each word
            int OneToNine = 3 + 3 + 5 + 4 + 4 + 3 + 5 + 5 + 4;
            //10-19: Same again 
            int TenToNineteen = 3 + 6 + 6 + 8 + 8 + 7 + 7 + 9 + 8 + 8;
            //20-99:  This is the first part of the numbers(twenty, thirty etc.) multiplied by 10 for all numbers in that set(21, 22, 23 etc.) then there are 8 sets of the 36(the units column) 
            int TwentyToNinetynine = 10 * (6 + 6 + 5 + 5 + 5 + 7 + 6 + 6) + (8 * (3 + 3 + 5 + 4 + 4 + 3 + 5 + 5 + 4));
            //100-999
            int OneHundredToNineNineNine = 36 * 100;
            OneHundredToNineNineNine += (9 * 854);
            OneHundredToNineNineNine += (7 * 9);
            OneHundredToNineNineNine += (9 * 99 * 10);
            sum = OneToNine + TenToNineteen + TwentyToNinetynine + OneHundredToNineNineNine + 11;
            MessageBox.Show("There are " + sum.ToString() + " letters on the numbers from 1 to 1000, when written in words.\n\n" + MyStop(), "Problem 17 - Solved");
            SetStatus("Waiting for a selection.");
            //Console.Write("\n");
            //MyStop();


        }

        private void btn40_Click(object sender, EventArgs e)
        {
            //April 2017
            voice.Speak("Problem 40");
            SetStatus("Problem 40 selected");
            string Message = "An irrational decimal fraction is created by concatenating the positive integers:\n\n";
            Message += "                                       0.123456789101112131415161718192021...\n\n";
            Message += "It can be seen that the 12th digit of the fractional part is 1.\n\n";
            Message += "If dn represents the nth digit of the fractional part, find the value of the following expression.\n\n";
            Message += "                                       d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000\n\n";
            MessageBox.Show(Message, "Problem 40 - Champernowne's constant");

            MyStart();
            SetStatus("Solving problem 40");
            string NumberString = "0";
            for (int i = 1; NumberString.Length < 1000001; i++)
            {
                NumberString += i.ToString();
            }
            MessageBox.Show(NumberString);

            string d1 = NumberString.Substring(1, 1);
            string d10 = NumberString.Substring(10, 1);
            string d100 = NumberString.Substring(100, 1);
            string d1000 = NumberString.Substring(1000, 1);
            string d10000 = NumberString.Substring(10000, 1);
            string d100000 = NumberString.Substring(100000, 1);
            int id1 = int.Parse(d1);
            int id10 = int.Parse(d10);
            int id100 = int.Parse(d100);
            int id1000 = int.Parse(d1000);
            int id10000 = int.Parse(d10000);
            int id100000 = int.Parse(d100000);
            int Result = id1 * id10 * id100 * id1000 * id10000 * id100000;

            Message = "d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000\n\n";
            Message += d1 + " × " + d10 + " × " + d100 + " × " + d1000 + " × " + d10000 + " × " + d100000 + " × " + d100000 + "\n\n";
            Message += Result + " \n\n" + MyStop();
            MessageBox.Show(Message, "Problem 40 - Solved");
            SetStatus("Waiting for a selection.");
        }

        private void btn19_Click(object sender, EventArgs e)
        {
            //April 2017
            voice.Speak("Problem 19");
            SetStatus("Problem 19 selected");
            string Message = "You are given the following information, but you may prefer to do some research for yourself.\n\n";
            Message += " 1 Jan 1900 was a Monday.\n\n";
            Message += "Thirty days has September, \nApril, June and November.\nAll the rest have thirty - one,\nSaving February alone,\nWhich has twenty - eight, rain or shine.  \nAnd on leap years, twenty-nine.\n\n";
            Message += "A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.\n\n";
            Message += "How many Sundays fell on the first of the month during the twentieth century \n(1 Jan 1901 to 31 Dec 2000)?";

            MessageBox.Show(Message, "Problem 19 - Counting Sundays");
            MyStart();
            SetStatus("Solving problem 19");
            int sundays = 0;

            for (DateTime date = new DateTime(1901, 1, 1); date.Date <= new DateTime(2000, 12, 31).Date; date = date.AddMonths(1))
            {
                if (date.DayOfWeek == DayOfWeek.Sunday)
                {
                    sundays++;
                }
            }
            Message = sundays.ToString() + " Sundays fell on the first of the month during the twentieth century.\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 19 - Solved");
            SetStatus("Waiting for a selection.");
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            DateTime thisDay = DateTime.Today;
            string ThisDayString = thisDay.ToString("D");
            toolStripStatusLabel2.Text = ThisDayString;
            SetStatus("Waiting for a selection.");
        }
        public void SetStatus(string Message)
        {
            //SetStatus( Message;)
            toolStripStatusLabel3.Text = Message;
        }

        private void btn25_Click(object sender, EventArgs e)
        {
            //April 2017
            voice.Speak("Problem 25");
            SetStatus("Problem 25 selected");
            string Message = "The Fibonacci sequence is defined by the recurrence relation:\n\n";
            Message += "         Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.\n\n";
            Message += "Hence the first 12 terms will be:\n\n";
            Message += "F1 = 1\nF2 = 1\nF3 = 2\nF4 = 3\nF5 = 5\nF6 = 8\nF7 = 13\nF8 = 21\nF9 = 34\nF10 = 55\nF11 = 89\nF12 = 144\n\n";
            Message += "The 12th term, F12, is the first term to contain three digits.\n\n";
            Message += "What is the index of the first term in the Fibonacci sequence to contain 1000 digits?";
            MessageBox.Show(Message, "Problem 25 - 1000-digit Fibonacci number");
            MyStart();
            SetStatus("Solving problem 25");

            bool KeepGoing = true;
            BigInteger Number1 = 1;
            BigInteger Number2 = 1;
            BigInteger Number3 = 0;
            int count = 2;
            do
            {
                count++;
                Number3 = Number1 + Number2;
                Number1 = Number2;
                Number2 = Number3;
                if (Number3.ToString().Length == 1000)
                {
                    KeepGoing = false;
                }
            }
            while (KeepGoing);
            Message = "The index of the first term in the Fibonacci sequence to contain 1000 digits is " + count.ToString() + "\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 25 - Solved");
            SetStatus("Waiting For A Selection");
        }
        private void btn56_Click(object sender, EventArgs e)
        {
            //April 2017
            voice.Speak("Problem 56");
            SetStatus("Problem 56 selected");
            string Message = "A googol (10^100) is a massive number: one followed by one-hundred zeros; 100^100 is almost unimaginably large: one followed by two-hundred zeros. Despite their size, the sum of the digits in each number is only 1.\n\n";
            Message += "Considering natural numbers of the form, a^b, where a, b < 100, what is the maximum digital sum?";
            //Message += "";

            MessageBox.Show(Message, "Problem 56 - Powerful digit sum");
            MyStart();
            SetStatus("Solving problem 56");

            BigInteger result = 0;
            BigInteger maxresult = 0;
            string sum;
            int maxsum = 0;
            int wina = 0;
            int winb = 0;
            for (int a = 1; a < 100; a++)
            {
                for (int b = 1; b < 100; b++)
                {
                    result = BigInteger.Pow(a, b);
                    sum = SumTheDigits(result);
                    if (Convert.ToInt32(sum) > maxsum)
                    {
                        maxsum = Convert.ToInt32(sum);
                        wina = a;
                        winb = b;
                        maxresult = result;
                    }

                }
            }

            Message = "The maximum digital sum where  where a, b < 100 is " + maxsum.ToString() + " (" + wina.ToString() + "^" + winb.ToString() + " = " + maxresult.ToString() + ")\n\n" + MyStop();
            MessageBox.Show(Message, "Problem xx - Solved");
            SetStatus("Waiting For A Selection");
        }



        private void btn55_Click(object sender, EventArgs e)
        {
            //April 2017
            SetStatus("Problem 55 selected");
            voice.Speak("Problem 55");
            string Message = "If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.\n\nNot all numbers produce palindromes so quickly.For example,\n\n";
            Message += "349 + 943 = 1292,\n1292 + 2921 = 4213\n4213 + 3124 = 7337\n\n";
            Message += "That is, 349 took three iterations to arrive at a palindrome.\n\nAlthough no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten - thousand, it will either(i) become a palindrome in less than fifty iterations, or, (ii)no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664(53 iterations, 28 - digits).\n\n";
            Message += "Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.\n\nHow many Lychrel numbers are there below ten - thousand ?";
            MessageBox.Show(Message, "Problem 55 - Lychrel Numbers ");
            MyStart();
            SetStatus("Solving problem 55");

            int LychrelCount = 0;

            for (int number = 1; number < 10001; number++)
            {
                bool IsPalindromic = false;
                int iterations = 0;
                BigInteger newnumber = number;
                BigInteger newnumberreveresed = 0;
                BigInteger result = 0;

                while ((!IsPalindromic) && (iterations < 51))
                {
                    newnumberreveresed = reverseNumber(newnumber);

                    result = newnumber + newnumberreveresed;

                    if (IsPalindrome(result.ToString()) == true)
                    {
                        IsPalindromic = true;
                    }
                    else
                    {
                        newnumber = result;
                        iterations++;
                    }

                }
                if (!IsPalindromic)
                {
                    LychrelCount++;
                }
            }

            Message = "There are " + LychrelCount + " Lychrel numbers below 10,000.\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 55 - Solved");
            SetStatus("Waiting For A Selection");
        }

        private void btn29_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 29");
            SetStatus("Problem 29 selected");
            string Message = "Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:\n\n";
            Message += "2^2=4, 2^3=8, 2^4=16, 2^5=32\n\n3^2 = 9, 3^3 = 27, 3^4 = 81, 3^5 = 243\n\n4^2 = 1^6, 4^3 = 6^4, 4^4 = 256, 4^5 = 1024\n\n5^2 = 2^5, 5^3 = 125, 5^4 = 625, 5^5 = 3125\n\n";
            Message += "If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:\n\n4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125\n\n";
            Message += "How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100 ? ";


            MessageBox.Show(Message, "Problem 29 - Distinct Powers");
            MyStart();
            SetStatus("Solving problem 29");
            List<BigInteger> Products = new List<BigInteger>();

            for (BigInteger a = 2; a < 101; a++)
            {
                for (int b = 2; b < 101; b++)
                {
                    BigInteger Result = BigInteger.Pow(a, b);
                    //Console.WriteLine(a + "^" + b + "=" + Result);
                    //long result = Convert.ToInt32(Result);
                    Products.Add(Result);
                }
            }
            Products.Sort();
            List<BigInteger> unique = Products.Distinct().ToList();
            int count = unique.Count;

            Message = "There are " + count + " distinct products. " + "\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 29 - Solved");
            SetStatus("Waiting For A Selection");
        }
        private void btn34_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 34");
            SetStatus("Problem 34 selected");
            string Message = "145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.\n\n";
            Message += "Find the sum of all numbers which are equal to the sum of the factorial of their digits.\n\n";
            Message += "Note: as 1! = 1 and 2! = 2 are not sums they are not included.";

            MessageBox.Show(Message, "Problem 34 - Digit Factorials");
            MyStart();
            SetStatus("Solving problem 34");

            int Result = 0;//this will hold the sum of any numbers where the sum of digit factorials = the number itself, eg 145.
            for (int i = 10; i < 100000; i++)
            {

                int digitFactorialTotal = 0;//This will hold the sum of the factorials of each digit in the current number.
                char[] Digits = new char[4];
                string stri = i.ToString();
                Digits = stri.ToCharArray();//split the number in to its digits.

                foreach (char Digit in Digits)
                {
                    int MyDigit = Int32.Parse(Digit.ToString());
                    switch (MyDigit)
                    {
                        case 1:
                            digitFactorialTotal += 1;
                            break;

                        case 2:
                            digitFactorialTotal += 2;
                            break;

                        case 3:
                            digitFactorialTotal += 6;
                            break;

                        case 4:
                            digitFactorialTotal += 24;
                            break;

                        case 5:
                            digitFactorialTotal += 120;
                            break;

                        case 6:
                            digitFactorialTotal += 720;
                            break;

                        case 7:
                            digitFactorialTotal += 5040;
                            break;

                        case 8:
                            digitFactorialTotal += 40320;
                            break;

                        case 9:
                            digitFactorialTotal += 362880;
                            break;

                        case 0:
                            digitFactorialTotal += 1;
                            break;
                    }
                }
                //all digits in this number factorised and summed..
                if (i == digitFactorialTotal)
                {
                    Result += i;
                    //Console.WriteLine("We have a result:- " + i);
                }
            }

            Message = "The sum of all numbers where the sum of digit factorials = the number is " + Result + "\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 34 - Solved");
            SetStatus("Waiting For A Selection");
        }
        private void btn14_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 14");
            SetStatus("Problem 14 selected");
            string Message = "The following iterative sequence is defined for the set of positive integers:\n\nn → n / 2(n is even)\nn → 3n + 1(n is odd)\n\n";
            Message += "Using the rule above and starting with 13, we generate the following sequence:\n\n13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1\n\n";
            Message += "It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.\n\n";
            Message += "Which starting number, under one million, produces the longest chain?\n\n NOTE: Once the chain starts the terms are allowed to go above one million.";

            MessageBox.Show(Message, "Problem 14 - Longest Collatz Sequence");
            MyStart();
            SetStatus("Solving problem 14");
            //Longest Collatz Sequence
            int maxChainLength = 0;
            int maxChainLengthStartNumber = 0;
            for (int i = 1; i < 1000001; i++)
            {
                int chainLength = 1;
                //int startNumber = 13;
                long n = i;
                while (n != 1)
                {
                    if (n % 2 == 0)
                    {
                        //it's even
                        n = n / 2;
                    }
                    else
                    {
                        //it's odd
                        n = (n * 3) + 1;
                    }
                    chainLength++;
                }
                if (chainLength > maxChainLength)
                {
                    maxChainLength = chainLength;
                    maxChainLengthStartNumber = i;
                }
            }
            //Console.WriteLine("Longest chain is " + maxChainLength.ToString() + " terms, starting at " + maxChainLengthStartNumber.ToString());
            Message = "Longest chain is " + maxChainLength.ToString() + " terms, starting at " + maxChainLengthStartNumber.ToString() + "\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 14 - Solved");
            SetStatus("Waiting For A Selection");
        }

        private void btn45_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 45");
            SetStatus("Problem 45 selected");
            string Message = "Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:\n\nTriangle Tn = n(n + 1) / 2     1, 3, 6, 10, 15, ...\n";
            Message += "Pentagonal Pn = n(3n−1) / 2        1, 5, 12, 22, 35, ...\nHexagonal Hn = n(2n−1)      1, 6, 15, 28, 45, ...\n\n";
            Message += "It can be verified that T285 = P165 = H143 = 40755.\n\nFind the next triangle number that is also pentagonal and hexagonal.";

            MessageBox.Show(Message, "Problem 45 - Triangle, Pentagonal, and Hexagonal Numbers");
            MyStart();
            SetStatus("Solving problem 45");
            //Note. Hexagonal Numbers are also Triangular so don't bother looking for triangular numbers, only pent and hex.
            for (int n = 144; n < 100000; n++)
            {
                int HexNumber = n * (n * 2 - 1);
                if (IsPentagonal(HexNumber))
                {
                    Message = HexNumber + " is the next number that is Triangular, Pentagnal and Hexagonal.";
                    break;
                }

            }
            Message += "\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 45 - Solved");
            SetStatus("Waiting For A Selection");
        }
        public static bool IsPentagonal(long InHexNumber)
        {
            double penTest = (Math.Sqrt(1 + 24 * InHexNumber) + 1.0) / 6.0;
            if (penTest == ((int)penTest))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public static long FactorialSum(long InNumber)
        {
            long digitFactorialTotal = 0;//This will hold the sum of the factorials of each digit in the current number.
            char[] Digits = new char[4];
            string stri = InNumber.ToString();
            Digits = stri.ToCharArray();//split the number in to its digits.

            foreach (char Digit in Digits)
            {
                int MyDigit = Int32.Parse(Digit.ToString());
                switch (MyDigit)
                {
                    case 1:
                        digitFactorialTotal += 1;
                        break;

                    case 2:
                        digitFactorialTotal += 2;
                        break;

                    case 3:
                        digitFactorialTotal += 6;
                        break;

                    case 4:
                        digitFactorialTotal += 24;
                        break;

                    case 5:
                        digitFactorialTotal += 120;
                        break;

                    case 6:
                        digitFactorialTotal += 720;
                        break;

                    case 7:
                        digitFactorialTotal += 5040;
                        break;

                    case 8:
                        digitFactorialTotal += 40320;
                        break;

                    case 9:
                        digitFactorialTotal += 362880;
                        break;

                    case 0:
                        digitFactorialTotal += 1;
                        break;
                }
            }
            return digitFactorialTotal;
        }

        private void btn74_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 74");
            SetStatus("Problem 74 selected");
            string Message = "The number 145 is well known for the property that the sum of the factorial of its digits is equal to 145:\n\n";
            Message += "1! + 4! + 5! = 1 + 24 + 120 = 145\n\n";
            Message += "Perhaps less well known is 169, in that it produces the longest chain of numbers that link back to 169; it turns out that there are only three such loops that exist:\n\n";
            Message += "169 → 363601 → 1454 → 169\n871 → 45361 → 871\n872 → 45362 → 872\n\n";
            Message += "It is not difficult to prove that EVERY starting number will eventually get stuck in a loop. For example,\n\n";
            Message += "69 → 363600 → 1454 → 169 → 363601 (→ 1454)\n78 → 45360 → 871 → 45361(→ 871)\n540 → 145(→ 145)\n\n";
            Message += "Starting with 69 produces a chain of five non-repeating terms, but the longest non-repeating chain with a starting number below one million is sixty terms.\n\n";
            Message += "How many chains, with a starting number below one million, contain exactly sixty non-repeating terms?";

            MessageBox.Show(Message, "Problem 74 - Digit Factorial Chains");
            MyStart();
            SetStatus("Solving problem 74");

            int MySixtyTermCount = 0;
            for (int i = 1; i < 1000001; i++)
            {
                long StartNumber = i;
                long MyNumber = StartNumber;
                long MyResult = 0;
                bool MyExitLoop = false;
                int MyTermCount = 0;

                List<long> MyList = new List<long>(); //To hold the results so we can see if we have got stuck in a loop.
                do
                {
                    MyTermCount++;
                    MyResult = FactorialSum(MyNumber);//sum the factorials
                    MyNumber = MyResult;//make the result the next start point

                    if (MyList.Contains(MyResult) || MyTermCount > 60)
                    {
                        MyExitLoop = true;
                    }
                    MyList.Add(MyResult);//add the result to the list so we can see if we're stuck in a loop
                }
                while (!MyExitLoop);
                if (MyTermCount == 60)
                {
                    MySixtyTermCount++;
                    Console.WriteLine(StartNumber + " results in 60 terms");
                }
            }

            Message = "There are " + MySixtyTermCount + " numbers below one million that result in exactly 60 terms." + "\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 74 - Solved");
            SetStatus("Waiting For A Selection");
        }

        private void btn22_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 22");
            SetStatus("Problem 22 selected");
            string Message = "Using names.txt, a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order.  Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.\n\n";
            Message += "For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.\n\n";
            Message += "What is the total of all the name scores in the file?";

            MessageBox.Show(Message, "Problem 22 - Names Scores");
            MyStart();
            SetStatus("Solving problem 22");
            int TotalScore = 0;
            using (var reader = new StreamReader("p022_names.txt"))
            {
                List<string> MyNames = new List<string>();

                while (!reader.EndOfStream)
                {
                    var line = reader.ReadLine();


                    MyNames.Add(line);
                }

                MyNames.Sort();

                int limit = MyNames.Count();
                for (int i = 0; i < limit; i++)
                {
                    int WordScore = NameScore(MyNames[i]);
                    WordScore = WordScore * (i + 1);
                    TotalScore += WordScore;
                }

            }

            Message = "The total of all name scores is " + TotalScore + "\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 22 - Solved");
            SetStatus("Waiting For A Selection");
        }

        public int NameScore(string name)
        {
            int score = 0;
            foreach (char ch in name)
            {
                switch (ch.ToString())
                {
                    case "A":
                        {
                            score += 1;
                            break;
                        }
                    case "B":
                        {
                            score += 2;
                            break;
                        }
                    case "C":
                        {
                            score += 3;
                            break;
                        }
                    case "D":
                        {
                            score += 4;
                            break;
                        }
                    case "E":
                        {
                            score += 5;
                            break;
                        }
                    case "F":
                        {
                            score += 6;
                            break;
                        }
                    case "G":
                        {
                            score += 7;
                            break;
                        }
                    case "H":
                        {
                            score += 8;
                            break;
                        }
                    case "I":
                        {
                            score += 9;
                            break;
                        }
                    case "J":
                        {
                            score += 10;
                            break;
                        }
                    case "K":
                        {
                            score += 11;
                            break;
                        }
                    case "L":
                        {
                            score += 12;
                            break;
                        }
                    case "M":
                        {
                            score += 13;
                            break;
                        }
                    case "N":
                        {
                            score += 14;
                            break;
                        }
                    case "O":
                        {
                            score += 15;
                            break;
                        }
                    case "P":
                        {
                            score += 16;
                            break;
                        }
                    case "Q":
                        {
                            score += 17;
                            break;
                        }
                    case "R":
                        {
                            score += 18;
                            break;
                        }
                    case "S":
                        {
                            score += 19;
                            break;
                        }
                    case "T":
                        {
                            score += 20;
                            break;
                        }
                    case "U":
                        {
                            score += 21;
                            break;
                        }
                    case "V":
                        {
                            score += 22;
                            break;
                        }
                    case "W":
                        {
                            score += 23;
                            break;
                        }
                    case "X":
                        {
                            score += 24;
                            break;
                        }
                    case "Y":
                        {
                            score += 25;
                            break;
                        }
                    case "Z":
                        {
                            score += 26;
                            break;
                        }
                }//end of switch
            }//end of for each
            return score;
        }//emd of namescore function

        private void btn13_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 13");
            SetStatus("Problem 13 selected");
            string Message = "Work out the first ten digits of the sum of the supplied one-hundred 50-digit numbers.\n\n";
            MessageBox.Show(Message, "Problem 13 - Large Sum");
            MyStart();
            SetStatus("Solving problem 13");

            BigInteger Total = 0;
            using (var reader = new StreamReader("p013_numbers.txt"))
            {
                List<BigInteger> MyNumbers = new List<BigInteger>();

                while (!reader.EndOfStream)
                {
                    var line = reader.ReadLine();
                    MyNumbers.Add(BigInteger.Parse(line));
                }
                foreach (BigInteger Number in MyNumbers)
                {
                    Total += Number;
                }
            }
            string Answer = Total.ToString();
            string FinalAnswer = Answer.Substring(0, 10);
            Message = "Answer is " + FinalAnswer + ".\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 13 - Solved");
            SetStatus("Waiting For A Selection");
        }


        private void btn52_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 52");
            SetStatus("Problem 52 selected");
            string Message = "It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.\n\n";
            Message += "Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, contain the same digits.";
            Message += "";

            MessageBox.Show(Message, "Problem 52 - Permuted Multiples");
            MyStart();
            SetStatus("Solving problem 52");
            BigInteger x = 100000;
            BigInteger x2 = 0;
            BigInteger x3 = 0;
            BigInteger x4 = 0;
            BigInteger x5 = 0;
            BigInteger x6 = 0;

            string sx2;
            string sx3;
            string sx4;
            string sx5;
            string sx6;
            string ssx2 = "";
            string ssx3 = "";
            string ssx4 = "";
            string ssx5 = "";
            string ssx6 = "";

            List<char> lx2 = new List<char>();
            List<char> lx3 = new List<char>();
            List<char> lx4 = new List<char>();
            List<char> lx5 = new List<char>();
            List<char> lx6 = new List<char>();

            char[] cx2;
            char[] cx3;
            char[] cx4;
            char[] cx5;
            char[] cx6;
            bool FoundIt = false;

            do
            {
                ssx2 = "";
                ssx3 = "";
                ssx4 = "";
                ssx5 = "";
                ssx6 = "";
                x++;
                x2 = x * 2;
                x3 = x * 3;
                x4 = x * 4;
                x5 = x * 5;
                x6 = x * 6;

                sx2 = x2.ToString();
                sx3 = x3.ToString();
                sx4 = x4.ToString();
                sx5 = x5.ToString();
                sx6 = x6.ToString();

                cx2 = sx2.ToCharArray();
                cx3 = sx3.ToCharArray();
                cx4 = sx4.ToCharArray();
                cx5 = sx5.ToCharArray();
                cx6 = sx6.ToCharArray();

                lx2 = cx2.ToList();
                lx3 = cx3.ToList();
                lx4 = cx4.ToList();
                lx5 = cx5.ToList();
                lx6 = cx6.ToList();

                lx2.Sort();
                lx3.Sort();
                lx4.Sort();
                lx5.Sort();
                lx6.Sort();
                //char[] chx2 = lx2.ToArray();

                foreach (char ch in lx2)
                {
                    ssx2 += ch.ToString();
                }
                foreach (char ch in lx3)
                {
                    ssx3 += ch.ToString();
                }
                foreach (char ch in lx4)
                {
                    ssx4 += ch.ToString();
                }
                foreach (char ch in lx5)
                {
                    ssx5+= ch.ToString();
                }
                foreach (char ch in lx6)
                {
                    ssx6 += ch.ToString();
                }

                if
                (ssx2 == ssx3 && ssx3 == ssx4 && ssx4 == ssx5 && ssx5 == ssx6)
                {
                    FoundIt = true;
                }
                
            } while (!FoundIt);

            Message = "The answer is " +  x + "\n\n";
            Message += x + "*2=" + x2 + "\n" + x + "*3=" + x3 + "\n" + x + "*4=" + x4 + "\n" + x + "*5=" + x5 + "\n" + x + "*6=" + x6 + "\n\n" + MyStop();            MessageBox.Show(Message, "Problem 52 - Solved");
            SetStatus("Waiting For A Selection");
        }

        public bool IsPandigital(int Number)
        {
            string sNumber = Number.ToString();
            char[] caNumber = sNumber.ToCharArray();
            List<char> lNumber = new List<char>();
            lNumber = caNumber.ToList();
            lNumber.Sort();
            string sNumber2 = "";
            foreach (char ch in lNumber)
            {
                sNumber2 += ch.ToString();
            }
            int NumberLength = sNumber2.Length;
            switch (NumberLength)
            {
                case 1:
		        {
                    if (sNumber2 == "1")
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                case 2:
		        {
                    if (sNumber2 == "12")
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                case 3:
		        {
                    if (sNumber2 == "123")
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                case 4:
		        {
                    if (sNumber2 == "1234")
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                case 5:
                { 
                    if (sNumber2 == "12345")
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
               case 6:
		        {
                    if (sNumber2 == "123456")
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                case 7:
		        {
                    if (sNumber2 == "1234567")
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                case 8:
		        {
                    if (sNumber2 == "12345678")
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                case 9:
		        {
                    if (sNumber2 == "123456789")
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            return false;
        }

        private void btn104_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 104");
            SetStatus("Problem 104 selected");
            string Message = "The Fibonacci sequence is defined by the recurrence relation:\n\nFn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.\n\n";
            Message += "It turns out that F541, which contains 113 digits, is the first Fibonacci number for which the last nine digits are 1-9 pandigital (contain all the digits 1 to 9, but not necessarily in order). And F2749, which contains 575 digits, is the first Fibonacci number for which the first nine digits are 1-9 pandigital.\n\n";
            Message += "Given that Fk is the first Fibonacci number for which the first nine digits AND the last nine digits are 1-9 pandigital, find k.";

            MessageBox.Show(Message, "Problem 104 - Pandigital Fibonacci Ends");
            MyStart();
            SetStatus("Solving problem 104");

            BigInteger Number1 = 1;
            BigInteger Number2 = 1;
            BigInteger Number3;
            string sNumber3;
            string sNumber3First9;
            string sNumber3Last9;
            int Index = 2;
            bool FoundIt = false;
            System.IO.StreamWriter file = new System.IO.StreamWriter("c:\\temp\\Prob 104.txt");
            file.WriteLine("Starting to loop");
            do
            {
                
                Number3 = Number1 + Number2;
                Number1 = Number2;
                Number2 = Number3;
                Index++;
                sNumber3 = Number3.ToString();
                if(Index % 100 == 0)
                {
                    file.WriteLine(Index + " is " + sNumber3.Length.ToString() + " characters long.");
                }
                
                if (sNumber3.Length > 112)
                {
                    sNumber3 = Number3.ToString();
                    sNumber3First9 = sNumber3.Substring(0, 9);
                    sNumber3Last9 = sNumber3.Substring(sNumber3.Length - 9);

                    if (IsPandigital(int.Parse(sNumber3First9)) && IsPandigital(int.Parse(sNumber3Last9)))
                    {
                        FoundIt = true;
                    }
                }
            } while (!FoundIt);

            Message = "The index of the first Fibonacci number whose first and last 9 digits are pandigital is " + Index + ".\n\n";
            Message += "It has " + sNumber3.Length + " digits. \n\n" + MyStop();
            MessageBox.Show(Message, "Problem 104 - Solved");
            SetStatus("Waiting For A Selection");
            file.WriteLine("Finished");
            file.Close();
        }
        private void button1_Click_3(object sender, EventArgs e)
        {
            int x = 987645321;
            if(IsPandigital(x))
            {
                MessageBox.Show("It is pandigital");
            }
            else
            {
                MessageBox.Show("not Pandigital");
            }
            
        }
        private void btn32_Click(object sender, EventArgs e)
        {
            SetStatus("Problem 32 selected");
            voice.Speak("Problem 32");
            string Message = "We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.\n\n";
            Message += "The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.\n\n";
            Message += "Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.\n\n";
            Message += "HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.";

            MessageBox.Show(Message, "Problem 32 - Pandigital Products");
            SetStatus("Solving problem 32");
            MyStart();

            int multiplier = 0;
            int multiplicand = 0;
            int product = 0;
            string sNumbers = "";
            int sum = 0;
            List<int> lProducts = new List<int>();
            for (multiplier = 0; multiplier < 100000 ; multiplier++)
            {
                for (multiplicand = 0; multiplicand < 100000; multiplicand++)
                {
                    product = multiplier * multiplicand;
                    sNumbers = multiplier.ToString() + multiplicand.ToString() + product.ToString();
                    if (sNumbers.Length > 9)
                    {
                        break;
                    }
                    if (sNumbers.Length == 9)
                    {
                        if (IsPandigital(int.Parse(sNumbers)))
                        {
                            if (!lProducts.Contains(product))
                            {
                                lProducts.Add(product);
                                sum += product;
                            }
                        }
                    }
                }

                //if (sNumbers.Length > 9)
                //{
                //    break;
                //}
            }

            Message = "The sum of the products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital is " + sum + "\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 32 - Solved");
            SetStatus("Waiting For A Selection");
        }
        private void btn41_Click(object sender, EventArgs e)
        {
            voice.Speak("Problem 41");
            SetStatus("Problem 41 selected");
            string Message = "We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.\n\n";
            Message += "What is the largest n-digit pandigital prime that exists?";
            Message += "";

            MessageBox.Show(Message, "Problem 41 - Pandigital prime");
            MyStart();
            SetStatus("Solving problem 41");

            bool[] Sieve = new bool[10000000];
            for (int count = 2; count < 10000000; count++)
            {
                Sieve[count] = true;
            }

            for (int count = 2; count < 10000000; count++)
            {
                if (Sieve[count] == true)
                {
                    for (long p = 2; (p * count) < Sieve.Length; p++)
                    {
                        Sieve[p * count] = false;
                    }
                }
            }

            for (int count = Sieve.Length - 1; count > 1; count--)
            {
                if (Sieve[count] == true)
                {
                    if (IsPandigital(count) && Sieve[count] == true)
                    {
                        Message = "the largest pandigital prime is " + count + ".";
                        break;
                    }
                }
            }

            Message += " " + "\n\n" + MyStop();
            MessageBox.Show(Message, "Problem 41 - Solved");
            SetStatus("Waiting For A Selection");
        }
        private void Skeleton(object sender, EventArgs e)
        {
            voice.Speak("Problem xx");
            SetStatus("Problem xx selected");
            string Message = "\n\n";
            Message += "";
            Message += "";

            MessageBox.Show(Message, "Problem xx - ");
            MyStart();
            SetStatus("Solving problem xx");


            Message = " " + "\n\n" + MyStop();
            MessageBox.Show(Message, "Problem xx - Solved");
            SetStatus("Waiting For A Selection");
        }

    }
}


